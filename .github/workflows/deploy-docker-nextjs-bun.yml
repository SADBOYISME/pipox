name: Build and Deploy Next.js Docker to Home Server

on:
  push:
    branches:
      - main # ‡∏´‡∏£‡∏∑‡∏≠ branch ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Deploy (‡πÄ‡∏ä‡πà‡∏ô master, production)

env:
  REGISTRY: ghcr.io # GitHub Container Registry
  # ‡∏ä‡∏∑‡πà‡∏≠ Image ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô username/repository_name ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å github.repository
  # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ override ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô IMAGE_NAME: your-custom-image-name
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read    # ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô repository (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkout)
      packages: write   # ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á GitHub Packages (GHCR)

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # <<< ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ cache

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # User ‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå Workflow
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á GHCR ‡πÉ‡∏ô repo ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

      - name: Extract metadata (tags, labels) for Docker
        id: meta # ‡∏ï‡∏±‡πâ‡∏á ID ‡πÉ‡∏´‡πâ Step ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á outputs
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: | # ‡∏™‡∏£‡πâ‡∏≤‡∏á Tags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Image
            type=sha # Tag ‡∏î‡πâ‡∏ß‡∏¢ commit SHA ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô sha-a1b2c3d)
            type=raw,value=latest,enable={{is_default_branch}} # Tag 'latest' ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô default branch (‡πÄ‡∏ä‡πà‡∏ô main)

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Directory ‡∏ó‡∏µ‡πà‡∏°‡∏µ Dockerfile (Root ‡∏Ç‡∏≠‡∏á Repo)
          push: true # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Push Image ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Registry ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Build ‡πÄ‡∏™‡∏£‡πá‡∏à
          tags: ${{ steps.meta.outputs.tags }} # Tags ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å step 'meta'
          labels: ${{ steps.meta.outputs.labels }} # Labels ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å step 'meta'
          cache-from: type=gha # ‡πÉ‡∏ä‡πâ GitHub Actions cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Docker layer caching (‡∏î‡∏∂‡∏á cache)
          cache-to: type=gha,mode=max # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å cache ‡πÑ‡∏õ‡∏¢‡∏±‡∏á GitHub Actions cache (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô cache)

  deploy-to-server:
    name: Deploy Docker Container to Server
    needs: build-and-push-docker-image # Job ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 'build-and-push-docker-image' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22 # Port SSH ‡∏Ç‡∏≠‡∏á Server (default ‡∏Ñ‡∏∑‡∏≠ 22)
          script: |
            set -e # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Script ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏î‡πÜ fail

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Tag ‡∏Ç‡∏≠‡∏á Image ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Commit SHA ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)
            # GITHUB_SHA ‡∏Ñ‡∏∑‡∏≠ Commit SHA ‡πÄ‡∏ï‡πá‡∏°, ::7 ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏≠‡∏≤ 7 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
            IMAGE_TAG="sha-${GITHUB_SHA::7}"
            # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ 'latest' tag ‡πÄ‡∏™‡∏°‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö default branch) ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô:
            # IMAGE_TAG="latest"

            FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
            CONTAINER_NAME="my-nextjs-app" # <<< ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Container ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏ô Server ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

            echo "INFO: Deploying image: $FULL_IMAGE_NAME"
            echo "INFO: Target container name: $CONTAINER_NAME"

            echo "INFO: Logging in to GitHub Container Registry on server..."
            # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Personal Access Token (PAT) ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå read:packages ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login ‡∏ö‡∏ô server
            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà YOUR_GITHUB_USERNAME_FOR_PAT ‡∏î‡πâ‡∏ß‡∏¢ Username ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á PAT
            echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.REGISTRY }} -u YOUR_GITHUB_USERNAME_FOR_PAT --password-stdin

            echo "INFO: Pulling Docker image from $FULL_IMAGE_NAME..."
            docker pull $FULL_IMAGE_NAME

            echo "INFO: Stopping and removing old container (if exists)..."
            docker stop $CONTAINER_NAME || true # '|| true' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ script fail ‡∏ñ‡πâ‡∏≤ container ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            docker rm $CONTAINER_NAME || true

            echo "INFO: Running new Docker container..."
            docker run -d \
              -p 3000:3000 \
              --name $CONTAINER_NAME \
              --restart always \
              # (Optional) ‡πÄ‡∏û‡∏¥‡πà‡∏° Environment Variables ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö App ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà:
              # -e NODE_ENV=production \
              # -e DATABASE_URL="${{ secrets.DATABASE_URL_ON_SERVER }}" \
              # (Optional) Mount volume ‡∏ñ‡πâ‡∏≤ Application ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏ß‡∏£:
              # -v /path/on/your/server/data:/app/data \
              $FULL_IMAGE_NAME

            echo "INFO: Cleaning up old Docker images (optional)..."
            docker image prune -af # -a ‡∏•‡∏ö image ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (dangling ‡πÅ‡∏•‡∏∞ unreferenced), -f ‡∏Ñ‡∏∑‡∏≠ force

            echo "üéâ Deployment to home server completed successfully!"
