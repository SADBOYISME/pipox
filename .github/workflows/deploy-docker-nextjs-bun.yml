name: Build and Deploy Next.js Docker to Home Server (Self-hosted)

on:
  push:
    branches:
      - main # ‡∏´‡∏£‡∏∑‡∏≠ branch ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Deploy (‡πÄ‡∏ä‡πà‡∏ô master, production)

env:
  REGISTRY: ghcr.io # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }} # ‡∏ä‡∏∑‡πà‡∏≠ Image ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô username/repository_name

jobs:
  build-and-push-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # Job ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏ô GitHub-hosted runner ‡πÑ‡∏î‡πâ‡∏î‡∏µ
    permissions:
      contents: read # ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô repository (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkout)
      packages: write # ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á GitHub Packages (GHCR)

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-server:
    name: Deploy Docker Container to Server (Self-hosted)
    needs: build-and-push-docker-image # ‡∏£‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Job ‡πÅ‡∏£‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    runs-on:
      self-hosted # <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ! ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏ö‡∏ô Self-hosted Runner ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ labels ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ ‡πÄ‡∏ä‡πà‡∏ô [self-hosted, linux, x64]

    steps:
      - name: Deploy Docker Container
        env: # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Environment variables ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô script ‡∏ô‡∏µ‡πâ
          GHCR_PAT: ${{ secrets.GHCR_PAT }} # PAT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Login ‡πÄ‡∏Ç‡πâ‡∏≤ GHCR
          # ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà YOUR_GITHUB_USERNAME_FOR_PAT ‡∏î‡πâ‡∏ß‡∏¢ Username ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á PAT ‡πÉ‡∏ô script ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
          GHCR_USERNAME: YOUR_GITHUB_USERNAME_FOR_PAT # <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô GitHub Username ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á GHCR_PAT
        run: |
          set -e # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Script ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏î‡πÜ fail

          IMAGE_TAG="sha-${GITHUB_SHA::7}"
          # ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ 'latest' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö default branch:
          # if [[ "${{ github.ref_name }}" == "${{ github.event.repository.default_branch }}" ]]; then
          #   IMAGE_TAG="latest"
          # fi

          FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
          CONTAINER_NAME="my-nextjs-app" # <<< ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Container ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏ô Server ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

          echo "INFO: Deploying image: $FULL_IMAGE_NAME"
          echo "INFO: Target container name: $CONTAINER_NAME"

          echo "INFO: Logging in to GitHub Container Registry..."
          echo "$GHCR_PAT" | docker login ${{ env.REGISTRY }} -u "$GHCR_USERNAME" --password-stdin

          echo "INFO: Pulling Docker image from $FULL_IMAGE_NAME..."
          docker pull $FULL_IMAGE_NAME

          echo "INFO: Stopping and removing old container (if exists)..."
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true

          echo "INFO: Running new Docker container..."
          docker run -d \
            -p 3000:3000 \
            --name $CONTAINER_NAME \
            --restart always \
            # (Optional) ‡πÄ‡∏û‡∏¥‡πà‡∏° Environment Variables ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö App ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà:
            # -e NODE_ENV=production \
            # -e DATABASE_URL="${{ secrets.DATABASE_URL_ON_SERVER }}" \
            # (Optional) Mount volume ‡∏ñ‡πâ‡∏≤ Application ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏ß‡∏£:
            # -v /path/on/your/server/data:/app/data \
            $FULL_IMAGE_NAME

          echo "INFO: Cleaning up old Docker images (optional)..."
          docker image prune -af

          echo "üéâ Deployment to home server completed successfully!"
