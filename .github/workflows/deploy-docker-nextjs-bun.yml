name: Build and Deploy Next.js Docker to Home Server

on:
  push:
    branches:
      - main # ‡∏´‡∏£‡∏∑‡∏≠ branch ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Deploy

env:
  REGISTRY: ghcr.io # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }} # ‡∏ä‡∏∑‡πà‡∏≠ Image ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô username/repository_name

jobs:
  build-and-push-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read # ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô repository (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkout)
      packages: write # ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á GitHub Packages (GHCR)

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # User ‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå Workflow
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á GHCR ‡πÉ‡∏ô repo ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: | # ‡∏™‡∏£‡πâ‡∏≤‡∏á Tags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Image
            type=sha # Tag ‡∏î‡πâ‡∏ß‡∏¢ commit SHA
            type=raw,value=latest,enable={{is_default_branch}} # Tag 'latest' ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô default branch

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Dockerfile (Root ‡∏Ç‡∏≠‡∏á Repo)
          push: true # Push Image ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Registry
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # ‡πÉ‡∏ä‡πâ GitHub Actions cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Docker layer caching
          cache-to: type=gha,mode=max

  deploy-to-server:
    name: Deploy Docker Container to Server
    needs: build-and-push-docker-image # Job ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å build-and-push-docker-image ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            IMAGE_TAG="sha-${GITHUB_SHA::7}" # ‡πÉ‡∏ä‡πâ Commit SHA ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô Tag (‡∏´‡∏£‡∏∑‡∏≠ 'latest')
            FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
            # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ tag 'latest' ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô IMAGE_TAG ‡πÄ‡∏õ‡πá‡∏ô "latest"
            # FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

            CONTAINER_NAME="my-nextjs-app" # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Container ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

            echo "üê≥ Logging in to GitHub Container Registry on server..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            echo "üöö Pulling Docker image: $FULL_IMAGE_NAME"
            docker pull $FULL_IMAGE_NAME

            echo "üõë Stopping and removing old container (if exists)..."
            docker stop $CONTAINER_NAME || true # || true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏ñ‡πâ‡∏≤ container ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            docker rm $CONTAINER_NAME || true

            echo "üöÄ Running new Docker container..."
            docker run -d \
              -p 3000:3000 \
              --name $CONTAINER_NAME \
              --restart always \
              # (Optional) -v /path/on/server/persistent-data:/app/data \ # Mount volume ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
              # (Optional) -e MY_ENV_VAR="some_value" \ # ‡∏™‡πà‡∏á Environment Variables
              $FULL_IMAGE_NAME

            echo "üßπ Cleaning up old images (optional)..."
            docker image prune -f

            echo "üéâ Deployment to home server completed successfully!"
